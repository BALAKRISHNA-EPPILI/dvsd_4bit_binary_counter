
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Wolf <claire@symbioticeda.com>          |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+4052 (git sha1 d061b0e, gcc 8.3.1 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Verilog-2005 frontend: /openLANE_flow/designs/dvsd_4bit_binary_counter/src/dvsd_4bit_binary_counter.v
Parsing SystemVerilog input from `/openLANE_flow/designs/dvsd_4bit_binary_counter/src/dvsd_4bit_binary_counter.v' to AST representation.
Generating RTLIL representation for module `\dvsd_4bit_binary_counter'.
Successfully finished Verilog frontend.

2. Generating Graphviz representation of design.
Writing dot description to `/openLANE_flow/designs/dvsd_4bit_binary_counter/runs/binary_counter_bala/tmp/synthesis/hierarchy.dot'.
Dumping module dvsd_4bit_binary_counter to page 1.

3. Executing HIERARCHY pass (managing design hierarchy).

3.1. Analyzing design hierarchy..
Top module:  \dvsd_4bit_binary_counter

3.2. Analyzing design hierarchy..
Top module:  \dvsd_4bit_binary_counter
Removed 0 unused modules.

4. Executing TRIBUF pass.

5. Executing SYNTH pass.

5.1. Executing HIERARCHY pass (managing design hierarchy).

5.1.1. Analyzing design hierarchy..
Top module:  \dvsd_4bit_binary_counter

5.1.2. Analyzing design hierarchy..
Top module:  \dvsd_4bit_binary_counter
Removed 0 unused modules.

5.2. Executing PROC pass (convert processes to netlists).

5.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

5.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 4 switch rules as full_case in process $proc$/openLANE_flow/designs/dvsd_4bit_binary_counter/src/dvsd_4bit_binary_counter.v:18$1 in module dvsd_4bit_binary_counter.
Removed a total of 0 dead cases.

5.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 1 redundant assignment.
Promoted 0 assignments to connections.

5.2.4. Executing PROC_INIT pass (extract init attributes).

5.2.5. Executing PROC_ARST pass (detect async resets in processes).

5.2.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\dvsd_4bit_binary_counter.$proc$/openLANE_flow/designs/dvsd_4bit_binary_counter/src/dvsd_4bit_binary_counter.v:18$1'.
     1/1: $0\out[3:0]

5.2.7. Executing PROC_DLATCH pass (convert process syncs to latches).

5.2.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\dvsd_4bit_binary_counter.\out' using process `\dvsd_4bit_binary_counter.$proc$/openLANE_flow/designs/dvsd_4bit_binary_counter/src/dvsd_4bit_binary_counter.v:18$1'.
  created $dff cell `$procdff$19' with positive edge clock.

5.2.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

5.2.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 4 empty switches in `\dvsd_4bit_binary_counter.$proc$/openLANE_flow/designs/dvsd_4bit_binary_counter/src/dvsd_4bit_binary_counter.v:18$1'.
Removing empty process `dvsd_4bit_binary_counter.$proc$/openLANE_flow/designs/dvsd_4bit_binary_counter/src/dvsd_4bit_binary_counter.v:18$1'.
Cleaned up 4 empty switches.

5.3. Executing FLATTEN pass (flatten design).

5.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_4bit_binary_counter.
<suppressed ~2 debug messages>

5.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_4bit_binary_counter..
Removed 0 unused cells and 6 unused wires.
<suppressed ~1 debug messages>

5.6. Executing CHECK pass (checking for obvious problems).
Checking module dvsd_4bit_binary_counter...
Found and reported 0 problems.

5.7. Executing OPT pass (performing simple optimizations).

5.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_4bit_binary_counter.

5.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_4bit_binary_counter'.
Removed a total of 0 cells.

5.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dvsd_4bit_binary_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

5.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dvsd_4bit_binary_counter.
Performed a total of 0 changes.

5.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_4bit_binary_counter'.
Removed a total of 0 cells.

5.7.6. Executing OPT_DFF pass (perform DFF optimizations).

5.7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_4bit_binary_counter..

5.7.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_4bit_binary_counter.

5.7.9. Finished OPT passes. (There is nothing left to do.)

5.8. Executing FSM pass (extract and optimize FSM).

5.8.1. Executing FSM_DETECT pass (finding FSMs in design).

5.8.2. Executing FSM_EXTRACT pass (extracting FSM from design).

5.8.3. Executing FSM_OPT pass (simple optimizations of FSMs).

5.8.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_4bit_binary_counter..

5.8.5. Executing FSM_OPT pass (simple optimizations of FSMs).

5.8.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

5.8.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

5.8.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

5.9. Executing OPT pass (performing simple optimizations).

5.9.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_4bit_binary_counter.

5.9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_4bit_binary_counter'.
Removed a total of 0 cells.

5.9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dvsd_4bit_binary_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

5.9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dvsd_4bit_binary_counter.
Performed a total of 0 changes.

5.9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_4bit_binary_counter'.
Removed a total of 0 cells.

5.9.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $procdff$19 ($dff) from module dvsd_4bit_binary_counter (D = $procmux$14_Y, Q = \out, rval = 4'0000).

5.9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_4bit_binary_counter..
Removed 1 unused cells and 1 unused wires.
<suppressed ~2 debug messages>

5.9.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_4bit_binary_counter.

5.9.9. Rerunning OPT passes. (Maybe there is more to do..)

5.9.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dvsd_4bit_binary_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

5.9.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dvsd_4bit_binary_counter.
Performed a total of 0 changes.

5.9.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_4bit_binary_counter'.
Removed a total of 0 cells.

5.9.13. Executing OPT_DFF pass (perform DFF optimizations).

5.9.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_4bit_binary_counter..

5.9.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_4bit_binary_counter.

5.9.16. Finished OPT passes. (There is nothing left to do.)

5.10. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from port B of cell dvsd_4bit_binary_counter.$add$/openLANE_flow/designs/dvsd_4bit_binary_counter/src/dvsd_4bit_binary_counter.v:28$4 ($add).
Removed top 28 bits (of 32) from port Y of cell dvsd_4bit_binary_counter.$add$/openLANE_flow/designs/dvsd_4bit_binary_counter/src/dvsd_4bit_binary_counter.v:28$4 ($add).
Removed top 31 bits (of 32) from port B of cell dvsd_4bit_binary_counter.$sub$/openLANE_flow/designs/dvsd_4bit_binary_counter/src/dvsd_4bit_binary_counter.v:35$6 ($sub).
Removed top 28 bits (of 32) from port Y of cell dvsd_4bit_binary_counter.$sub$/openLANE_flow/designs/dvsd_4bit_binary_counter/src/dvsd_4bit_binary_counter.v:35$6 ($sub).
Removed top 28 bits (of 32) from wire dvsd_4bit_binary_counter.$add$/openLANE_flow/designs/dvsd_4bit_binary_counter/src/dvsd_4bit_binary_counter.v:28$4_Y.
Removed top 28 bits (of 32) from wire dvsd_4bit_binary_counter.$sub$/openLANE_flow/designs/dvsd_4bit_binary_counter/src/dvsd_4bit_binary_counter.v:35$6_Y.

5.11. Executing PEEPOPT pass (run peephole optimizers).

5.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_4bit_binary_counter..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

5.13. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module dvsd_4bit_binary_counter:
  creating $macc model for $add$/openLANE_flow/designs/dvsd_4bit_binary_counter/src/dvsd_4bit_binary_counter.v:28$4 ($add).
  creating $macc model for $sub$/openLANE_flow/designs/dvsd_4bit_binary_counter/src/dvsd_4bit_binary_counter.v:35$6 ($sub).
  creating $alu model for $macc $sub$/openLANE_flow/designs/dvsd_4bit_binary_counter/src/dvsd_4bit_binary_counter.v:35$6.
  creating $alu model for $macc $add$/openLANE_flow/designs/dvsd_4bit_binary_counter/src/dvsd_4bit_binary_counter.v:28$4.
  creating $alu cell for $add$/openLANE_flow/designs/dvsd_4bit_binary_counter/src/dvsd_4bit_binary_counter.v:28$4: $auto$alumacc.cc:485:replace_alu$23
  creating $alu cell for $sub$/openLANE_flow/designs/dvsd_4bit_binary_counter/src/dvsd_4bit_binary_counter.v:35$6: $auto$alumacc.cc:485:replace_alu$26
  created 2 $alu and 0 $macc cells.

5.14. Executing SHARE pass (SAT-based resource sharing).

5.15. Executing OPT pass (performing simple optimizations).

5.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_4bit_binary_counter.

5.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_4bit_binary_counter'.
Removed a total of 0 cells.

5.15.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dvsd_4bit_binary_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

5.15.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dvsd_4bit_binary_counter.
Performed a total of 0 changes.

5.15.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_4bit_binary_counter'.
Removed a total of 0 cells.

5.15.6. Executing OPT_DFF pass (perform DFF optimizations).

5.15.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_4bit_binary_counter..

5.15.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_4bit_binary_counter.

5.15.9. Finished OPT passes. (There is nothing left to do.)

5.16. Executing MEMORY pass.

5.16.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

5.16.2. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

5.16.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_4bit_binary_counter..

5.16.4. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

5.16.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_4bit_binary_counter..

5.16.6. Executing MEMORY_COLLECT pass (generating $mem cells).

5.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_4bit_binary_counter..

5.18. Executing OPT pass (performing simple optimizations).

5.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_4bit_binary_counter.

5.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_4bit_binary_counter'.
Removed a total of 0 cells.

5.18.3. Executing OPT_DFF pass (perform DFF optimizations).

5.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_4bit_binary_counter..

5.18.5. Finished fast OPT passes.

5.19. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

5.20. Executing OPT pass (performing simple optimizations).

5.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_4bit_binary_counter.

5.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_4bit_binary_counter'.
Removed a total of 0 cells.

5.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dvsd_4bit_binary_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

5.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dvsd_4bit_binary_counter.
Performed a total of 0 changes.

5.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_4bit_binary_counter'.
Removed a total of 0 cells.

5.20.6. Executing OPT_SHARE pass.

5.20.7. Executing OPT_DFF pass (perform DFF optimizations).

5.20.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_4bit_binary_counter..

5.20.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_4bit_binary_counter.

5.20.10. Finished OPT passes. (There is nothing left to do.)

5.21. Executing TECHMAP pass (map to technology primitives).

5.21.1. Executing Verilog-2005 frontend: /build/bin/../share/yosys/techmap.v
Parsing Verilog input from `/build/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

5.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $eq.
Using template $paramod$8742280fdebca84e1c87f2a86ed84f62d558f4cc\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $logic_not.
Using template $paramod$32a7b7b86c07519b7537abc18e96f0331f97914d\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $sdff.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000100 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~250 debug messages>

5.22. Executing OPT pass (performing simple optimizations).

5.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_4bit_binary_counter.
<suppressed ~53 debug messages>

5.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_4bit_binary_counter'.
<suppressed ~27 debug messages>
Removed a total of 9 cells.

5.22.3. Executing OPT_DFF pass (perform DFF optimizations).

5.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_4bit_binary_counter..
Removed 9 unused cells and 75 unused wires.
<suppressed ~10 debug messages>

5.22.5. Finished fast OPT passes.

5.23. Executing ABC pass (technology mapping using ABC).

5.23.1. Extracting gate netlist of module `\dvsd_4bit_binary_counter' to `<abc-temp-dir>/input.blif'..
Extracted 34 gates and 41 wires to a netlist network with 5 inputs and 4 outputs.

5.23.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

5.23.1.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:        5
ABC RESULTS:               MUX cells:        4
ABC RESULTS:              NAND cells:        2
ABC RESULTS:               NOR cells:        1
ABC RESULTS:               NOT cells:        2
ABC RESULTS:                OR cells:        6
ABC RESULTS:             ORNOT cells:        1
ABC RESULTS:              XNOR cells:        1
ABC RESULTS:               XOR cells:        5
ABC RESULTS:        internal signals:       32
ABC RESULTS:           input signals:        5
ABC RESULTS:          output signals:        4
Removing temp directory.

5.24. Executing OPT pass (performing simple optimizations).

5.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_4bit_binary_counter.
<suppressed ~4 debug messages>

5.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_4bit_binary_counter'.
Removed a total of 0 cells.

5.24.3. Executing OPT_DFF pass (perform DFF optimizations).

5.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_4bit_binary_counter..
Removed 1 unused cells and 21 unused wires.
<suppressed ~2 debug messages>

5.24.5. Finished fast OPT passes.

5.25. Executing HIERARCHY pass (managing design hierarchy).

5.25.1. Analyzing design hierarchy..
Top module:  \dvsd_4bit_binary_counter

5.25.2. Analyzing design hierarchy..
Top module:  \dvsd_4bit_binary_counter
Removed 0 unused modules.

5.26. Printing statistics.

=== dvsd_4bit_binary_counter ===

   Number of wires:                 30
   Number of wire bits:             33
   Number of public wires:           4
   Number of public wire bits:       7
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 30
     $_ANDNOT_                       5
     $_MUX_                          4
     $_NAND_                         2
     $_NOR_                          1
     $_NOT_                          1
     $_ORNOT_                        1
     $_OR_                           6
     $_SDFF_PP0_                     4
     $_XNOR_                         1
     $_XOR_                          5

5.27. Executing CHECK pass (checking for obvious problems).
Checking module dvsd_4bit_binary_counter...
Found and reported 0 problems.

6. Generating Graphviz representation of design.
Writing dot description to `/openLANE_flow/designs/dvsd_4bit_binary_counter/runs/binary_counter_bala/tmp/synthesis/post_techmap.dot'.
Dumping module dvsd_4bit_binary_counter to page 1.

7. Executing SHARE pass (SAT-based resource sharing).

8. Executing OPT pass (performing simple optimizations).

8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_4bit_binary_counter.

8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_4bit_binary_counter'.
Removed a total of 0 cells.

8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dvsd_4bit_binary_counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dvsd_4bit_binary_counter.
Performed a total of 0 changes.

8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_4bit_binary_counter'.
Removed a total of 0 cells.

8.6. Executing OPT_DFF pass (perform DFF optimizations).

8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_4bit_binary_counter..

8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_4bit_binary_counter.

8.9. Finished OPT passes. (There is nothing left to do.)

9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_4bit_binary_counter..

10. Printing statistics.

=== dvsd_4bit_binary_counter ===

   Number of wires:                 30
   Number of wire bits:             33
   Number of public wires:           4
   Number of public wire bits:       7
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 30
     $_ANDNOT_                       5
     $_MUX_                          4
     $_NAND_                         2
     $_NOR_                          1
     $_NOT_                          1
     $_ORNOT_                        1
     $_OR_                           6
     $_SDFF_PP0_                     4
     $_XNOR_                         1
     $_XOR_                          5

mapping tbuf

11. Executing TECHMAP pass (map to technology primitives).

11.1. Executing Verilog-2005 frontend: /home/balakrishna/Desktop/vsdflow/work/tools/openlane_working_dir/openlane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/home/balakrishna/Desktop/vsdflow/work/tools/openlane_working_dir/openlane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

11.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

12. Executing SIMPLEMAP pass (map simple cells to gate primitives).

13. Executing MUXCOVER pass (mapping to wider MUXes).
Covering MUX trees in module dvsd_4bit_binary_counter..
  Treeifying 4 MUXes:
    Found tree with 1 MUXes at root $abc$246$procmux$14_Y[0].
    Found tree with 1 MUXes at root $abc$246$procmux$14_Y[1].
    Found tree with 1 MUXes at root $abc$246$procmux$14_Y[2].
    Found tree with 1 MUXes at root $abc$246$procmux$14_Y[3].
    Finished treeification: Found 4 trees.
  Covering trees:
    Replaced tree at $abc$246$procmux$14_Y[0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$246$procmux$14_Y[1]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$246$procmux$14_Y[2]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$246$procmux$14_Y[3]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
  Added a total of 0 decoder MUXes.
<suppressed ~69 debug messages>

14. Executing TECHMAP pass (map to technology primitives).

14.1. Executing Verilog-2005 frontend: /home/balakrishna/Desktop/vsdflow/work/tools/openlane_working_dir/openlane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/mux4_map.v
Parsing Verilog input from `/home/balakrishna/Desktop/vsdflow/work/tools/openlane_working_dir/openlane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/mux4_map.v' to AST representation.
Generating RTLIL representation for module `\$_MUX4_'.
Successfully finished Verilog frontend.

14.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

15. Executing SIMPLEMAP pass (map simple cells to gate primitives).

16. Executing TECHMAP pass (map to technology primitives).

16.1. Executing Verilog-2005 frontend: /home/balakrishna/Desktop/vsdflow/work/tools/openlane_working_dir/openlane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/mux2_map.v
Parsing Verilog input from `/home/balakrishna/Desktop/vsdflow/work/tools/openlane_working_dir/openlane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/mux2_map.v' to AST representation.
Generating RTLIL representation for module `\$_MUX_'.
Successfully finished Verilog frontend.

16.2. Continuing TECHMAP pass.
Using template \$_MUX_ for cells of type $_MUX_.
No more expansions possible.
<suppressed ~7 debug messages>

17. Executing SIMPLEMAP pass (map simple cells to gate primitives).

18. Executing TECHMAP pass (map to technology primitives).

18.1. Executing Verilog-2005 frontend: /home/balakrishna/Desktop/vsdflow/work/tools/openlane_working_dir/openlane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/home/balakrishna/Desktop/vsdflow/work/tools/openlane_working_dir/openlane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

18.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

19. Executing SIMPLEMAP pass (map simple cells to gate primitives).

20. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

20.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\dvsd_4bit_binary_counter':
  mapped 4 $_DFF_P_ cells to \sky130_fd_sc_hd__dfxtp_2 cells.

21. Printing statistics.

=== dvsd_4bit_binary_counter ===

   Number of wires:                 50
   Number of wire bits:             53
   Number of public wires:           4
   Number of public wire bits:       7
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 34
     $_ANDNOT_                       5
     $_MUX_                          4
     $_NAND_                         2
     $_NOR_                          1
     $_NOT_                          1
     $_ORNOT_                        1
     $_OR_                           6
     $_XNOR_                         1
     $_XOR_                          5
     sky130_fd_sc_hd__dfxtp_2        4
     sky130_fd_sc_hd__mux2_1         4

[INFO]: ABC: WireLoad : S_4

22. Executing ABC pass (technology mapping using ABC).

22.1. Extracting gate netlist of module `\dvsd_4bit_binary_counter' to `/tmp/yosys-abc-i6gGAD/input.blif'..
Extracted 26 gates and 36 wires to a netlist network with 9 inputs and 12 outputs.

22.1.1. Executing ABC.
Running ABC command: /build/bin/yosys-abc -s -f /tmp/yosys-abc-i6gGAD/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-i6gGAD/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-i6gGAD/input.blif 
ABC: + read_lib -w /openLANE_flow/designs/dvsd_4bit_binary_counter/runs/binary_counter_bala/tmp/trimmed.lib 
ABC: Parsing finished successfully.  Parsing time =     0.10 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130_fd_sc_hd__tt_025C_1v80" from "/openLANE_flow/designs/dvsd_4bit_binary_counter/runs/binary_counter_bala/tmp/trimmed.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.14 sec
ABC: Memory =    7.77 MB. Time =     0.14 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /openLANE_flow/designs/dvsd_4bit_binary_counter/runs/binary_counter_bala/tmp/synthesis/yosys.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_8".
ABC: Setting output load to be 17.650000.
ABC: + read_constr /openLANE_flow/designs/dvsd_4bit_binary_counter/runs/binary_counter_bala/tmp/synthesis/yosys.sdc 
ABC: + fx 
ABC: + mfs 
ABC: + strash 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + retime -D -D 10000.0 -M 5 
ABC: + scleanup 
ABC: Error: The network is combinational.
ABC: + fraig_store 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + fraig_restore 
ABC: + amap -m -Q 0.1 -F 20 -A 20 -C 5000 
ABC: + retime -D -D 10000.0 
ABC: + buffer -N 5 -S 1000.0 
ABC: Node 36 has dup fanin 24.
ABC: Node 36 has dup fanin 33.
ABC: Node 36 has dup fanin 24.
ABC: Node 36 has dup fanin 33.
ABC: + upsize -D 10000.0 
ABC: Current delay (861.17 ps) does not exceed the target delay (10000.00 ps). Upsizing is not performed.
ABC: + dnsize -D 10000.0 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =     19 ( 31.6 %)   Cap = 11.5 ff ( 15.1 %)   Area =      131.38 ( 47.4 %)   Delay =   888.70 ps  ( 15.8 %)               
ABC: Path  0 --       5 : 0    3 pi                        A =   0.00  Df =  13.2   -8.8 ps  S =  26.7 ps  Cin =  0.0 ff  Cout =  10.8 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --      27 : 2    3 sky130_fd_sc_hd__or2_2    A =   6.26  Df = 303.9 -179.9 ps  S =  71.1 ps  Cin =  1.5 ff  Cout =   8.5 ff  Cmax = 299.4 ff  G =  566  
ABC: Path  2 --      31 : 2    3 sky130_fd_sc_hd__or2_2    A =   6.26  Df = 591.1 -359.2 ps  S =  61.7 ps  Cin =  1.5 ff  Cout =   5.2 ff  Cmax = 299.4 ff  G =  342  
ABC: Path  3 --      37 : 4    1 sky130_fd_sc_hd__o2bb2a_2 A =  11.26  Df = 888.7   -0.9 ps  S = 110.8 ps  Cin =  1.8 ff  Cout =  17.6 ff  Cmax = 294.8 ff  G = 1005  
ABC: Start-point = pi4 (\out [0]).  End-point = po9 ($abc$246$new_n34_).
ABC: + print_stats -m 
ABC: netlist                       : i/o =    9/   12  lat =    0  nd =    19  edge =     40  area =131.38  delay = 3.00  lev = 3
ABC: + write_blif /tmp/yosys-abc-i6gGAD/output.blif 

22.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__a21bo_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a31o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__buf_1 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__nand2_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__nor2b_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__o21a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o22a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o2bb2a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or2_2 cells:        2
ABC RESULTS:        internal signals:       15
ABC RESULTS:           input signals:        9
ABC RESULTS:          output signals:       12
Removing temp directory.

23. Executing SETUNDEF pass (replace undef values with defined constants).

24. Executing HILOMAP pass (mapping to constant drivers).

25. Executing SPLITNETS pass (splitting up multi-bit signals).

26. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_4bit_binary_counter..
Removed 0 unused cells and 51 unused wires.
<suppressed ~1 debug messages>

27. Executing INSBUF pass (insert buffer cells for connected wires).

28. Executing CHECK pass (checking for obvious problems).
Checking module dvsd_4bit_binary_counter...
Warning: Wire dvsd_4bit_binary_counter.\out [3] is used but has no driver.
Warning: Wire dvsd_4bit_binary_counter.\out [2] is used but has no driver.
Warning: Wire dvsd_4bit_binary_counter.\out [1] is used but has no driver.
Warning: Wire dvsd_4bit_binary_counter.\out [0] is used but has no driver.
Found and reported 4 problems.

29. Printing statistics.

=== dvsd_4bit_binary_counter ===

   Number of wires:                 27
   Number of wire bits:             30
   Number of public wires:           4
   Number of public wire bits:       7
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 27
     sky130_fd_sc_hd__a21bo_2        1
     sky130_fd_sc_hd__a31o_2         1
     sky130_fd_sc_hd__buf_1          1
     sky130_fd_sc_hd__dfxtp_2        4
     sky130_fd_sc_hd__inv_2          5
     sky130_fd_sc_hd__mux2_1         4
     sky130_fd_sc_hd__nand2_2        2
     sky130_fd_sc_hd__nor2b_2        4
     sky130_fd_sc_hd__o21a_2         1
     sky130_fd_sc_hd__o22a_2         1
     sky130_fd_sc_hd__o2bb2a_2       1
     sky130_fd_sc_hd__or2_2          2

   Chip area for module '\dvsd_4bit_binary_counter': 261.500800

30. Executing Verilog backend.
Dumping module `\dvsd_4bit_binary_counter'.

Warnings: 4 unique messages, 4 total
End of script. Logfile hash: 2a951049ca, CPU: user 0.99s system 0.08s, MEM: 43.89 MB peak
Yosys 0.9+4052 (git sha1 d061b0e, gcc 8.3.1 -fPIC -Os)
Time spent: 35% 4x stat (0 sec), 30% 2x abc (0 sec), ...
